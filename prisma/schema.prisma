// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String   @unique
  category     String
  image        String
  price        Float
  brand        String
  rating       Float    @default(0)
  numReviews   Int      @default(0)
  countInStock Int      @default(0)
  description  String
  isFeatured   Boolean  @default(false)
  banner       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Order {
  id                  Int              @id @default(autoincrement())
  userId              Int
  user                User             @relation(fields: [userId], references: [id])
  orderItems          OrderItem[]
  shippingAddress     ShippingAddress?
  paymentMethod       String
  paymentResultId     String?
  paymentResultStatus String?
  paymentResultEmail  String?
  itemsPrice          Float
  shippingPrice       Float
  totalPrice          Float
  isPaid              Boolean          @default(false)
  paidAt              DateTime?
  isDelivered         Boolean          @default(false)
  deliveredAt         DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  orderId  Int
  order    Order  @relation(fields: [orderId], references: [id])
  name     String
  quantity Int
  image    String
  price    Float
}

model ShippingAddress {
  id         Int    @id @default(autoincrement())
  orderId    Int    @unique
  order      Order  @relation(fields: [orderId], references: [id])
  fullName   String
  address    String
  city       String
  postalCode String
  country    String
}
